import json
import os
import re
from download_tb import *

insert_string = """        // auto generated by tools/config_tb.py
        parameter PIXEL_CLK = 100;  //100MHz
        parameter CLK_PERIOD = 1000 / PIXEL_CLK;  //像素时钟周期-10ns
        parameter FRAME_RATE = 30;  //帧频
        parameter WIDTH = 1280;  //分辨率：宽度
        parameter LINE_BLANK = 0;  //行消隐期
        parameter TOTAL_COL = (WIDTH + LINE_BLANK);  //每行总像素数-740
        parameter HIDTH = 1024;  //分辨率：高度
        parameter EXTRA_LINES = 0;  //多输出的行数
        parameter TOTAL_ROW = (HIDTH + EXTRA_LINES);  //总行数-1034
        parameter TOTAL_PIXEL = TOTAL_COL * TOTAL_ROW;  //每帧总像素数
        parameter FRAME_PERIOD = 1_000_000_000 / FRAME_RATE;  //帧周期-16,666,666.66666667ns
        parameter VIDEO_BEGIN = 100;//(PIXEL_CLK * 1_000_000 / FRAME_RATE - (TOTAL_COL * TOTAL_ROW)) / 2;  //1帧内总时钟数-总像素数
        parameter CNT_FIELD = PIXEL_CLK * 1_000_000 / FRAME_RATE;  //帧同步计数
        parameter DW = 16;  //数据宽度
        parameter CW = 10;  //地址宽度
        // generated end"""


# 从../sim/sub0-grad/目录下加载image_cfg.json文件，并从其中读取图像的尺寸和像素时钟
def config_tb(filename, insert_string):

    url_1_tb = "https://gitee.com/i540113104/zg_fpga/raw/master/BasicModule/modelsim_simulation_template/sim/tb_image.v"
    url_1_do = "https://gitee.com/i540113104/zg_fpga/raw/master/BasicModule/modelsim_simulation_template/sim/run_image.do"
    url_2_tb = "https://gitee.com/i540113104/zg_fpga/raw/master/BasicModule/modelsim_simulation_template/sim/tb_simple.v"
    url_2_do = "https://gitee.com/i540113104/zg_fpga/raw/master/BasicModule/modelsim_simulation_template/sim/run.do"
    # 检查当前路径下是否存在tb.v文件，如果不存在从GitHub上下载
    files = os.listdir(os.getcwd())
    # print(files)
    tb_files = [f for f in files if f.endswith("tb.v")]
    # print(tb_files)
    if len(tb_files) == 0:
        # print("tb.v文件不存在，正在从GitHub上下载...")
        tb_file_exit = False
        # download_file_from_github.main()
    else:
        # print("tb.v文件存在")
        tb_file_exit = True

    # 解析json脚本
    with open(filename) as f:
        json_cfg = json.load(f)
    tb_cfg = json_cfg["tb"]
    image_cfg = json_cfg["image"]
    # object-tb
    tb_mode = tb_cfg["tb_mode"]
    if tb_mode == "image":
        # 不存在tb.v，从GitHub上下载
        if not tb_file_exit:
            print("tb.v文件不存在，正在从GitHub上下载...")
            download_file_from_github(url_1_tb, "tb.v")
            download_file_from_github(url_1_do, "run.do")
        else:
            print("tb.v文件存在")
            print("\033[0;31;40m使用图像仿真脚本\033[0m")
            # print("使用图像仿真脚本")
            tb_path = tb_cfg["path"]
            tb_name = tb_cfg["name"]
            tb_width = int(tb_cfg["width"])
            tb_height = int(tb_cfg["height"])
            tb_frame_rate = int(tb_cfg["frame_rate"])
            tb_pixel_clock = int(tb_cfg["pixel_clock"])
            # object-image
            image_path = image_cfg["path"]
            image_name = image_cfg["name"]
            image_image_number = int(image_cfg["image_number"])
            image_mode = image_cfg["image_mode"]
            image_width = int(image_cfg["width"])
            image_height = int(image_cfg["height"])

            if image_mode == "y16":
                image_mode = 16
            else:
                image_mode = 8
            insert_string = insert_string.replace(
                "parameter DW = 16", "parameter DW = " + str(image_mode)
            )
            insert_string = insert_string.replace(
                "PIXEL_CLK = 100", "PIXEL_CLK = " + str(tb_pixel_clock)
            )

            print("**************************************************")
            print("*", "testbench配置信息：", "                           *")
            print(
                "*",
                "像素时钟为",
                tb_pixel_clock,
                "MHz",
                "                            *",
            )
            insert_string = insert_string.replace(
                "FRAME_RATE = 30", "FRAME_RATE = " + str(tb_frame_rate)
            )
            if tb_width < 1024:
                insert_string = insert_string.replace(
                    "WIDTH = 1280", "WIDTH =10'd" + str(tb_width)
                )
            else:
                insert_string = insert_string.replace(
                    "WIDTH = 1280", "WIDTH =11'd" + str(tb_width)
                )

            if tb_height < 1024:
                insert_string = insert_string.replace(
                    "HIDTH = 1024", "HIDTH = 10'd" + str(tb_height)
                )
            else:
                insert_string = insert_string.replace(
                    "HIDTH = 1024", "HIDTH =11'd" + str(tb_height)
                )

            print(
                "*" "分辨率为",
                tb_width,
                "x",
                tb_height,
                "                            *",
            )
            print("**************************************************")

            with open(tb_path + tb_name, "r", encoding="utf-8") as file:
                file_data = file.read()

            start = "// auto generated by tools/config_tb.py"
            end = "// generated end"

            if start in file_data and end in file_data:
                # 删除两个字符串之间的内容
                file_data = re.sub(f"{start}.*{end}", "", file_data, flags=re.DOTALL)
                # 写回文件
                with open(tb_path + tb_name, "w", encoding="utf-8") as file:
                    file.write(file_data)

            search_string = "module tb;"
            with open(tb_path + tb_name, "r", encoding="utf-8") as file:
                lines = file.readlines()
                inserted = False
                for i, line in enumerate(lines):
                    if search_string in line and not inserted:
                        lines.insert(i + 1, insert_string)
                        inserted = True

                    if inserted:
                        with open(tb_path + tb_name, "w", encoding="utf-8") as file:
                            file.writelines(lines)
    else:
        # 不存在tb.v，从GitHub上下载
        if not tb_file_exit:
            print("tb.v文件不存在，正在从GitHub上下载...")
            download_file_from_github(url_2_tb, "tb.v")
            download_file_from_github(url_2_do, "run.do")
        else:
            print("\033[0;31;40m使用简单仿真脚本\033[0m")
        # print("使用简单仿真脚本")


def check_path():
    """
    Checks if the 'output' and 'data' directories exist and creates them if they don't.

    This function changes the current working directory to the parent directory of the script,
    then checks if the 'output' directory exists. If it doesn't, it creates the directory.
    It then checks if the 'data' directory exists. If it doesn't, it creates the directory.

    Note: This function assumes that the script is located in a directory structure where the
    parent directory contains the 'output' and 'data' directories.

    """
    dir1 = "output"
    dir2 = "data"
    # make_dir为Makefile脚本根目录
    make_dir = os.getcwd()

    sim_dir = os.path.dirname(make_dir)
    root_dir = os.path.dirname(sim_dir)

    os.chdir(sim_dir)
    if not os.path.exists(dir1):
        print(dir1 + "文件夹不存在，正在创建...")
        os.makedirs(dir1)
    else:
        print(dir1 + "文件夹已存在")

    if not os.path.exists(dir2):
        print(dir2 + "文件夹不存在，正在创建...")
        os.makedirs(dir2)
    else:
        print(dir2 + "文件夹已存在")

    os.chdir(dir2)
    data_dir = os.getcwd()
    # print("*****")
    # print(os.getcwd())

    files = os.listdir(data_dir)
    raw_files = [f for f in files if f.endswith(".raw")]
    if len(raw_files) == 0:
        print("raw文件不存在，请在data文件夹下保存一张raw图像")
        return -1
    else:
        print("raw文件存在")

    os.chdir(make_dir)
    # 检查当前路径下是否存在json文件，并统计json文件的个数
    files = os.listdir(make_dir)
    json_files = [f for f in files if f.endswith(".json")]
    i = 0
    if len(json_files) == 0:
        print("json文件不存在，请配置json文件")
        return -2
    else:
        print("json文件存在")
        for file in json_files:
            i += 1
            # print(str(i)+":"+file)
        if i != 1:
            print("当前路径下存在多个json文件，请选择一个json文件进行配置")
            return -3
        else:
            print("当前路径下存在一个json文件")
            return 0


def main():
    a = check_path()
    # print(a)
    if a == 0:
        files = os.listdir(os.getcwd())
        json_files = [f for f in files if f.endswith(".json")]
        configuration_name = os.getcwd() + "/" + json_files[0]
        config_tb(configuration_name, insert_string)


if __name__ == "__main__":
    main()
